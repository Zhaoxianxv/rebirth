package com.yfy.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yfy.db.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Session_key = new Property(1, String.class, "session_key", false, "SESSION_KEY");
        public final static Property Class_id = new Property(2, int.class, "class_id", false, "CLASS_ID");
        public final static Property Fxt_id = new Property(3, int.class, "fxt_id", false, "FXT_ID");
        public final static Property Head_pic = new Property(4, String.class, "head_pic", false, "HEAD_PIC");
        public final static Property User_id = new Property(5, String.class, "user_id", false, "USER_ID");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property Username = new Property(7, String.class, "username", false, "USERNAME");
        public final static Property Pass_word = new Property(8, String.class, "pass_word", false, "PASS_WORD");
        public final static Property User_type = new Property(9, String.class, "user_type", false, "USER_TYPE");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SESSION_KEY\" TEXT NOT NULL ," + // 1: session_key
                "\"CLASS_ID\" INTEGER NOT NULL ," + // 2: class_id
                "\"FXT_ID\" INTEGER NOT NULL ," + // 3: fxt_id
                "\"HEAD_PIC\" TEXT NOT NULL ," + // 4: head_pic
                "\"USER_ID\" TEXT NOT NULL ," + // 5: user_id
                "\"NAME\" TEXT NOT NULL ," + // 6: name
                "\"USERNAME\" TEXT NOT NULL ," + // 7: username
                "\"PASS_WORD\" TEXT NOT NULL ," + // 8: pass_word
                "\"USER_TYPE\" TEXT NOT NULL );"); // 9: user_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getSession_key());
        stmt.bindLong(3, entity.getClass_id());
        stmt.bindLong(4, entity.getFxt_id());
        stmt.bindString(5, entity.getHead_pic());
        stmt.bindString(6, entity.getUser_id());
        stmt.bindString(7, entity.getName());
        stmt.bindString(8, entity.getUsername());
        stmt.bindString(9, entity.getPass_word());
        stmt.bindString(10, entity.getUser_type());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getSession_key());
        stmt.bindLong(3, entity.getClass_id());
        stmt.bindLong(4, entity.getFxt_id());
        stmt.bindString(5, entity.getHead_pic());
        stmt.bindString(6, entity.getUser_id());
        stmt.bindString(7, entity.getName());
        stmt.bindString(8, entity.getUsername());
        stmt.bindString(9, entity.getPass_word());
        stmt.bindString(10, entity.getUser_type());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // session_key
            cursor.getInt(offset + 2), // class_id
            cursor.getInt(offset + 3), // fxt_id
            cursor.getString(offset + 4), // head_pic
            cursor.getString(offset + 5), // user_id
            cursor.getString(offset + 6), // name
            cursor.getString(offset + 7), // username
            cursor.getString(offset + 8), // pass_word
            cursor.getString(offset + 9) // user_type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSession_key(cursor.getString(offset + 1));
        entity.setClass_id(cursor.getInt(offset + 2));
        entity.setFxt_id(cursor.getInt(offset + 3));
        entity.setHead_pic(cursor.getString(offset + 4));
        entity.setUser_id(cursor.getString(offset + 5));
        entity.setName(cursor.getString(offset + 6));
        entity.setUsername(cursor.getString(offset + 7));
        entity.setPass_word(cursor.getString(offset + 8));
        entity.setUser_type(cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
